// Code generated by MockGen. DO NOT EDIT.
// Source: D:\GolandProjects\BenchmarkClient\rpcClient\rpcClient.go
//
// Generated by this command:
//
//	mockgen -source=D:\GolandProjects\BenchmarkClient\rpcClient\rpcClient.go -destination=mock_RPCClient .go -package=rpcClient
//

// Package mock_RPCClient is a generated GoMock package.
package RPCClient

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// CloseConn mocks base method.
func (m *MockRPCClient) CloseConn() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConn")
}

// CloseConn indicates an expected call of CloseConn.
func (mr *MockRPCClientMockRecorder) CloseConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockRPCClient)(nil).CloseConn))
}

// Connect mocks base method.
func (m *MockRPCClient) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockRPCClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRPCClient)(nil).Connect))
}

// RequestStart mocks base method.
func (m *MockRPCClient) RequestStart(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestStart", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestStart indicates an expected call of RequestStart.
func (mr *MockRPCClientMockRecorder) RequestStart(fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestStart", reflect.TypeOf((*MockRPCClient)(nil).RequestStart), fileName)
}

// RequestStop mocks base method.
func (m *MockRPCClient) RequestStop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestStop")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestStop indicates an expected call of RequestStop.
func (mr *MockRPCClientMockRecorder) RequestStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestStop", reflect.TypeOf((*MockRPCClient)(nil).RequestStop))
}
