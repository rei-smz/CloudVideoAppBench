// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: recording.proto

package RecordingControl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecodingControl_Start_FullMethodName = "/recording.RecodingControl/start"
	RecodingControl_Stop_FullMethodName  = "/recording.RecodingControl/stop"
)

// RecodingControlClient is the client API for RecodingControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecodingControlClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*ServerReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*ServerReply, error)
}

type recodingControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRecodingControlClient(cc grpc.ClientConnInterface) RecodingControlClient {
	return &recodingControlClient{cc}
}

func (c *recodingControlClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, RecodingControl_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodingControlClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, RecodingControl_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecodingControlServer is the server API for RecodingControl service.
// All implementations must embed UnimplementedRecodingControlServer
// for forward compatibility
type RecodingControlServer interface {
	Start(context.Context, *StartRequest) (*ServerReply, error)
	Stop(context.Context, *StopRequest) (*ServerReply, error)
	mustEmbedUnimplementedRecodingControlServer()
}

// UnimplementedRecodingControlServer must be embedded to have forward compatible implementations.
type UnimplementedRecodingControlServer struct {
}

func (UnimplementedRecodingControlServer) Start(context.Context, *StartRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedRecodingControlServer) Stop(context.Context, *StopRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedRecodingControlServer) mustEmbedUnimplementedRecodingControlServer() {}

// UnsafeRecodingControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecodingControlServer will
// result in compilation errors.
type UnsafeRecodingControlServer interface {
	mustEmbedUnimplementedRecodingControlServer()
}

func RegisterRecodingControlServer(s grpc.ServiceRegistrar, srv RecodingControlServer) {
	s.RegisterService(&RecodingControl_ServiceDesc, srv)
}

func _RecodingControl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodingControlServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecodingControl_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodingControlServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecodingControl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodingControlServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecodingControl_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodingControlServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecodingControl_ServiceDesc is the grpc.ServiceDesc for RecodingControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecodingControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recording.RecodingControl",
	HandlerType: (*RecodingControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start",
			Handler:    _RecodingControl_Start_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _RecodingControl_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recording.proto",
}
