// Code generated by MockGen. DO NOT EDIT.
// Source: D:\winter24\ra\CloudVideoAppBench\BenchmarkServer\MetricsGetter\MetricsGetter.go
//
// Generated by this command:
//
//	mockgen -source=D:\winter24\ra\CloudVideoAppBench\BenchmarkServer\MetricsGetter\MetricsGetter.go -destination=D:\winter24\ra\CloudVideoAppBench\BenchmarkServer\MetricsGetter\mock_MetricsGetter.go -package=MetricsGetter
//

// Package MetricsGetter is a generated GoMock package.
package MetricsGetter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricsGetter is a mock of MetricsGetter interface.
type MockMetricsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsGetterMockRecorder
}

// MockMetricsGetterMockRecorder is the mock recorder for MockMetricsGetter.
type MockMetricsGetterMockRecorder struct {
	mock *MockMetricsGetter
}

// NewMockMetricsGetter creates a new mock instance.
func NewMockMetricsGetter(ctrl *gomock.Controller) *MockMetricsGetter {
	mock := &MockMetricsGetter{ctrl: ctrl}
	mock.recorder = &MockMetricsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsGetter) EXPECT() *MockMetricsGetterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockMetricsGetter) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockMetricsGetterMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMetricsGetter)(nil).Run))
}

// Start mocks base method.
func (m *MockMetricsGetter) Start(fileName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", fileName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMetricsGetterMockRecorder) Start(fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricsGetter)(nil).Start), fileName)
}

// Stop mocks base method.
func (m *MockMetricsGetter) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockMetricsGetterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMetricsGetter)(nil).Stop))
}
